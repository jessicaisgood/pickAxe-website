{"ast":null,"code":"/**\n * Wallchain\n * Copyright 2018-Present The Wallchain Foundation\n *\n * This product includes software developed at The Wallchain Foundation.\n *\n * This file is part of the Wallchain library.\n * The Wallchain library is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * The Wallchain library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\n * along with the Wallchain library. If not, see <http://www.gnu.org/licenses/>.\n */\nimport StorageUtils from \"./StorageUtils\";\nexport default class WebServerRestClient {\n  constructor() {\n    this.baseUrl = \"https://www.callpanda.net\";\n    this.headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: StorageUtils.hasToken()\n    };\n  }\n\n  _fullRoute(url) {\n    return `${this.baseUrl}${url}`;\n  }\n\n  _fetch(route, method, body, isQuery = false) {\n    if (!route) throw new Error('Route is undefined');\n\n    let fullRoute = this._fullRoute(route);\n\n    if (isQuery && body) {\n      const qs = require('qs');\n\n      const query = qs.stringify(body);\n      fullRoute = `${fullRoute}?${query}`;\n      body = undefined;\n    }\n\n    let opts = {\n      method,\n      headers: this.headers\n    };\n\n    if (body) {\n      Object.assign(opts, {\n        body: JSON.stringify(body)\n      });\n    }\n\n    const fetchPromise = () => fetch(fullRoute, opts); //instead of fetch\n\n\n    return fetchPromise().then(response => response.json());\n  }\n\n  GET(route, query) {\n    return this._fetch(route, 'GET', query, true);\n  }\n\n  POST(route, body) {\n    return this._fetch(route, 'POST', body);\n  }\n\n  PUT(route, body) {\n    return this._fetch(route, 'PUT', body);\n  }\n\n  DELETE(route, query) {\n    return this._fetch(route, 'DELETE', query, true);\n  }\n\n}","map":{"version":3,"sources":["/Users/wangxi05104/Desktop/bitgas-website/src/tools/WebServerRestClient.js"],"names":["StorageUtils","WebServerRestClient","constructor","baseUrl","headers","Authorization","hasToken","_fullRoute","url","_fetch","route","method","body","isQuery","Error","fullRoute","qs","require","query","stringify","undefined","opts","Object","assign","JSON","fetchPromise","fetch","then","response","json","GET","POST","PUT","DELETE"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,YAAP,MAAyB,gBAAzB;AAEA,eAAe,MAAMC,mBAAN,CAA0B;AAErCC,EAAAA,WAAW,GAAI;AACX,SAAKC,OAAL,GAAe,2BAAf;AACA,SAAKC,OAAL,GAAe;AACX,gBAAU,kBADC;AAEX,sBAAgB,kBAFL;AAGXC,MAAAA,aAAa,EAAEL,YAAY,CAACM,QAAb;AAHJ,KAAf;AAKH;;AAEDC,EAAAA,UAAU,CAAEC,GAAF,EAAO;AACb,WAAQ,GAAE,KAAKL,OAAQ,GAAEK,GAAI,EAA7B;AACH;;AAEDC,EAAAA,MAAM,CAAEC,KAAF,EAASC,MAAT,EAAiBC,IAAjB,EAAuBC,OAAO,GAAG,KAAjC,EAAwC;AAC1C,QAAI,CAACH,KAAL,EAAY,MAAM,IAAII,KAAJ,CAAU,oBAAV,CAAN;;AACZ,QAAIC,SAAS,GAAG,KAAKR,UAAL,CAAgBG,KAAhB,CAAhB;;AACA,QAAIG,OAAO,IAAID,IAAf,EAAqB;AACjB,YAAMI,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,YAAMC,KAAK,GAAGF,EAAE,CAACG,SAAH,CAAaP,IAAb,CAAd;AACAG,MAAAA,SAAS,GAAI,GAAEA,SAAU,IAAGG,KAAM,EAAlC;AACAN,MAAAA,IAAI,GAAGQ,SAAP;AACH;;AACD,QAAIC,IAAI,GAAG;AACPV,MAAAA,MADO;AAEPP,MAAAA,OAAO,EAAE,KAAKA;AAFP,KAAX;;AAIA,QAAIQ,IAAJ,EAAU;AACNU,MAAAA,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoB;AAAET,QAAAA,IAAI,EAAEY,IAAI,CAACL,SAAL,CAAeP,IAAf;AAAR,OAApB;AACH;;AACD,UAAMa,YAAY,GAAG,MAAMC,KAAK,CAACX,SAAD,EAAYM,IAAZ,CAAhC,CAhB0C,CAgBU;;;AACpD,WAAOI,YAAY,GACdE,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADf,CAAP;AAEH;;AAEDC,EAAAA,GAAG,CAAEpB,KAAF,EAASQ,KAAT,EAAgB;AAAE,WAAO,KAAKT,MAAL,CAAYC,KAAZ,EAAmB,KAAnB,EAA0BQ,KAA1B,EAAiC,IAAjC,CAAP;AAAgD;;AACrEa,EAAAA,IAAI,CAAErB,KAAF,EAASE,IAAT,EAAe;AAAE,WAAO,KAAKH,MAAL,CAAYC,KAAZ,EAAmB,MAAnB,EAA2BE,IAA3B,CAAP;AAA0C;;AAC/DoB,EAAAA,GAAG,CAAEtB,KAAF,EAASE,IAAT,EAAe;AAAE,WAAO,KAAKH,MAAL,CAAYC,KAAZ,EAAmB,KAAnB,EAA0BE,IAA1B,CAAP;AAAyC;;AAC7DqB,EAAAA,MAAM,CAAEvB,KAAF,EAASQ,KAAT,EAAgB;AAAE,WAAO,KAAKT,MAAL,CAAYC,KAAZ,EAAmB,QAAnB,EAA6BQ,KAA7B,EAAoC,IAApC,CAAP;AAAmD;;AAvCtC","sourcesContent":["/**\n * Wallchain\n * Copyright 2018-Present The Wallchain Foundation\n *\n * This product includes software developed at The Wallchain Foundation.\n *\n * This file is part of the Wallchain library.\n * The Wallchain library is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * The Wallchain library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\n * along with the Wallchain library. If not, see <http://www.gnu.org/licenses/>.\n */\nimport StorageUtils from \"./StorageUtils\";\n\nexport default class WebServerRestClient {\n\n    constructor () {\n        this.baseUrl = \"https://www.callpanda.net\";\n        this.headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: StorageUtils.hasToken()\n        };\n    }\n\n    _fullRoute (url) {\n        return `${this.baseUrl}${url}`;\n    }\n\n    _fetch (route, method, body, isQuery = false) {\n        if (!route) throw new Error('Route is undefined');\n        let fullRoute = this._fullRoute(route);\n        if (isQuery && body) {\n            const qs = require('qs');\n            const query = qs.stringify(body);\n            fullRoute = `${fullRoute}?${query}`;\n            body = undefined;\n        }\n        let opts = {\n            method,\n            headers: this.headers\n        };\n        if (body) {\n            Object.assign(opts, { body: JSON.stringify(body) });\n        }\n        const fetchPromise = () => fetch(fullRoute, opts);  //instead of fetch\n        return fetchPromise()\n            .then(response => response.json());\n    }\n\n    GET (route, query) { return this._fetch(route, 'GET', query, true); }\n    POST (route, body) { return this._fetch(route, 'POST', body); }\n    PUT (route, body) { return this._fetch(route, 'PUT', body); }\n    DELETE (route, query) { return this._fetch(route, 'DELETE', query, true); }\n}\n"]},"metadata":{},"sourceType":"module"}